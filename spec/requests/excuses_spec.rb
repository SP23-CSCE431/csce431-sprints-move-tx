require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/excuses', type: :request do
    # need to run the oauth before each test 
    include_context 'test user requests'

    let!(:member) { Member.create!(name: 'MyName1') }
    let!(:event) do
      Event.create!(
        name: 'Park clean up',
        date: Date.parse('2022-12-15'),
        point_type: 'Outreach',
        event_type: 'Service'
      )
    end
    
  # This should return the minimal set of attributes required to create a valid
  # Excuse. As you add validations to Excuse, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {
      member_id: member.id,
      event_id: event.id,
      description: 'I was sick',
      file: nil
    }
  }

  let(:invalid_attributes) {
    skip('Add a hash of attributes invalid for your model')
  }

  describe 'GET /index' do
    it 'renders a successful response' do
      Excuse.create! valid_attributes
      get excuses_url
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      excuse = Excuse.create! valid_attributes
      get excuse_url(excuse)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      get new_excuse_url
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'renders a successful response' do
      excuse = Excuse.create! valid_attributes
      get edit_excuse_url(excuse)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Excuse' do
        expect {
          post excuses_url, params: { excuse: valid_attributes }
        }.to change(Excuse, :count).by(1)
      end

      it 'redirects to the created excuse' do
        post excuses_url, params: { excuse: valid_attributes }
        expect(response).to redirect_to(excuse_url(Excuse.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Excuse' do
        expect {
          post excuses_url, params: { excuse: invalid_attributes }
        }.to change(Excuse, :count).by(0)
      end

    
      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post excuses_url, params: { excuse: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) {
        {file: nil}
      }

      it 'updates the requested excuse' do
        excuse = Excuse.create! valid_attributes
        patch excuse_url(excuse), params: { excuse: new_attributes }
        excuse.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the excuse' do
        excuse = Excuse.create! valid_attributes
        patch excuse_url(excuse), params: { excuse: new_attributes }
        excuse.reload
        expect(response).to redirect_to(excuse_url(excuse))
      end
    end

    context 'with invalid parameters' do
    
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        excuse = Excuse.create! valid_attributes
        patch excuse_url(excuse), params: { excuse: invalid_attributes }
        expect(response).to have_http_status(:unprocessable_entity)
      end
    
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested excuse' do
      excuse = Excuse.create! valid_attributes
      expect {
        delete excuse_url(excuse)
      }.to change(Excuse, :count).by(-1)
    end

    it 'redirects to the excuses list' do
      excuse = Excuse.create! valid_attributes
      delete excuse_url(excuse)
      expect(response).to redirect_to(excuses_url)
    end
  end
end
